name: CI

on: [
  push,
  pull_request,
  workflow_dispatch
]

env:
  LLVM_MINGW_VERSION: llvm-mingw-20240619-msvcrt-ubuntu-20.04-x86_64
  LLVM_MINGW_DOWNLOAD: https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-msvcrt-ubuntu-20.04-x86_64.tar.xz

jobs:
  build-windows:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        preset: [
          "clang-ue3-x86-release",
          "clang-ue4-x64-release",
          "msvc-ue3-x86-release",
          "msvc-ue4-x64-release",
        ]

    steps:
    - name: Setup Clang
      if: startswith(matrix.preset, 'clang')
      uses: egor-tensin/setup-clang@v1

    - name: Add MSVC to PATH
      if: startswith(matrix.preset, 'msvc')
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: ${{ fromJSON('["x86", "x64"]')[contains(matrix.preset, 'x64')] }}

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    # We only actually need this python version to run the download script, we're not going to link
    # against it, so don't need to specify arch
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ">=3.10"

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure build
      run: |
        pip install requests

        cmake . --preset ${{ matrix.preset }} -G Ninja

    - name: Build
      run: cmake --build out/build/${{ matrix.preset }}

  build-ubuntu:
    # Require at least 24 for the mingw build
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - preset: clang-cross-ue3-x86-release
            container: clang-cross
          - preset: clang-cross-ue4-x64-release
            container: clang-cross
          - preset: llvm-mingw-ue3-x86-release
            container: llvm-mingw
          - preset: llvm-mingw-ue4-x64-release
            container: llvm-mingw
          - preset: mingw-ue3-x86-release
            container: mingw
          - preset: mingw-ue4-x64-release
            container: mingw

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: ghcr.io/bl-sdk/${{ matrix.toolchain.container }}:latest
          configFile: .devcontainer/${{ matrix.toolchain.container }}/devcontainer.json
          push: never
          # The git watcher cmake thinks something's unsafe? Doesn't happen to me locally.
          runCmd: |
            git config --global --add safe.directory `pwd`
            git config --global --add safe.directory `pwd`/libs/unrealsdk

            cmake . --preset ${{ matrix.toolchain.preset }} -G Ninja
            cmake --build out/build/${{ matrix.toolchain.preset }}

# ==============================================================================

  clang-tidy:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        preset: [
          "clang-ue3-x86-release",
          "clang-ue4-x64-release",
        ]

    steps:
    - name: Setup Clang
      if: startswith(matrix.preset, 'clang')
      uses: egor-tensin/setup-clang@v1

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    # Need newer python to run the python lib downloader script
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ">=3.10"

    # Needed pyyaml for clang tidy to enable `-export-fixes` and requests for the python lib downloader
    - name: Install pip packages
      run: pip install pyyaml requests

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure CMake
      run: cmake . --preset ${{ matrix.preset }} -DCMAKE_DISABLE_PRECOMPILE_HEADERS=On

    - name: Remove `.modmap`s from compile commands
      run: |
        (Get-Content "out\build\${{ matrix.preset }}\compile_commands.json")    `
          -replace "@CMakeFiles.+?\.modmap", ""                                 `
        | Set-Content                                                           `
          -Path "out\build\${{ matrix.preset }}\compile_commands.json"

    - name: Run clang-tidy
      run: |
        python (Get-Command run-clang-tidy).Source                              `
          -p "out\build\${{ matrix.preset }}"                                   `
          -export-fixes clang-tidy-fixes.yml                                    `
          $([Regex]::Escape("$pwd\src") + ".+\.(c|cpp|h|hpp)$")

    - name: Process clang-tidy warnings
      uses: asarium/clang-tidy-action@v1
      with:
        fixesFile: clang-tidy-fixes.yml

  clang-format:
    runs-on: windows-latest

    steps:
    - name: Setup Clang
      uses: egor-tensin/setup-clang@v1

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run clang-format
      run: |
        clang-format                                                            `
          -n -Werror                                                            `
          $(Get-ChildItem                                                       `
              src                                                               `
              -File                                                             `
              -Recurse                                                          `
              -Include ("*.c", "*.cpp", "*.h", "*.hpp")                         `
            | % FullName)

  spelling:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check spelling
      uses: crate-ci/typos@master

  pyright:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Run pyright
      uses: jakebailey/pyright-action@v2
      with:
        working-directory: ./stubs

  ruff:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Ruff Linting
      uses: chartboost/ruff-action@v1
      with:
        src: ./stubs

    - name: Run Ruff Formatting
      uses: chartboost/ruff-action@v1
      with:
        src: ./stubs
        args: format --check
